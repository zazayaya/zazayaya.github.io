<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on zaza的博客</title>
    <link>https://zazayaya.github.io/tags/kubernetes.html</link>
    <description>Recent content in kubernetes on zaza的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 31 Aug 2021 15:26:26 +0800</lastBuildDate><atom:link href="https://zazayaya.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s教程-k3s安装文档</title>
      <link>https://zazayaya.github.io/2021/08/31/k8s-k3s-install-doc.html</link>
      <pubDate>Tue, 31 Aug 2021 15:26:26 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/31/k8s-k3s-install-doc.html</guid>
      <description>环境准备 # 解决已知bug # open /proc/sys/net/netfilter/nf_conntrack_max: permission denied grep -q net.netfilter.nf_conntrack_max /etc/sysctl.conf || echo &amp;#39;net.netfilter.nf_conntrack_max=131072&amp;#39; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p | grep nf_conntrack_max 安装server # 国内用户，可以使用以下方法加速安装 curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - # 查</description>
    </item>
    
    <item>
      <title>K8s教程-rancher安装文档</title>
      <link>https://zazayaya.github.io/2021/08/31/k8s-install-by-rancher.html</link>
      <pubDate>Tue, 31 Aug 2021 09:18:26 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/31/k8s-install-by-rancher.html</guid>
      <description>环境准备 # 解决已知bug # open /proc/sys/net/netfilter/nf_conntrack_max: permission denied grep -q net.netfilter.nf_conntrack_max /etc/sysctl.conf || echo &amp;#39;net.netfilter.nf_conntrack_max=131072&amp;#39; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p | grep nf_conntrack_max 安装 # 安装 Rancher 2.x docker run -d --privileged --restart=unless-stopped \ -p 80:80 -p 443:443 \ rancher/rancher:latest 注册主机(创建业务集群) 添加集群</description>
    </item>
    
    <item>
      <title>K8s教程-ceph分布式存储</title>
      <link>https://zazayaya.github.io/2021/08/25/ceph-getting-started.html</link>
      <pubDate>Wed, 25 Aug 2021 15:16:26 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/25/ceph-getting-started.html</guid>
      <description>测试环境：Ubuntu20.04 版本 v14.2.22 Nautilus released v15.2.14 Octopus released v16.2.5 Pacific released 最新版本，建议使用此版本？ This is the fifth backport release in the Pacific series. We recommend all Pacific users update to this release. 概念介绍 什么是</description>
    </item>
    
    <item>
      <title>K8s教程-ingress-nginx测试</title>
      <link>https://zazayaya.github.io/2021/08/24/k8s-ingress-nginx.html</link>
      <pubDate>Tue, 24 Aug 2021 18:29:11 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/24/k8s-ingress-nginx.html</guid>
      <description>注意保证虚拟机时间同步，否则无法拉取镜像 报错：x509: certificate has expired or is not yet valid 创建deployment test1.zazayaya.com 和 test2.zazayaya.com # apt install ntpdate;ntpdate cn.ntp.org.cn mkdir ~/ingress-test # 部署pod cat &amp;gt;</description>
    </item>
    
    <item>
      <title>K8s教程-自定义镜像并上传dockerhub</title>
      <link>https://zazayaya.github.io/2021/08/24/docker-hub-upload.html</link>
      <pubDate>Tue, 24 Aug 2021 16:41:11 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/24/docker-hub-upload.html</guid>
      <description>编写web测试程序 cat &amp;gt; hello-world.go &amp;lt;&amp;lt; EOF package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, HelloServer) fmt.Printf(&amp;#34;http://0.0.0.0:8080\n&amp;#34;) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } func HelloServer(w http.ResponseWriter, r *http.Request) { name, err := os.Hostname() if err != nil { name=&amp;#34;获取主机名失败&amp;#3</description>
    </item>
    
    <item>
      <title>K8s教程-kubernetes Ingress控制器</title>
      <link>https://zazayaya.github.io/2021/08/17/k8s-ingress.html</link>
      <pubDate>Tue, 17 Aug 2021 15:27:11 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/17/k8s-ingress.html</guid>
      <description>应用场景 Ingress 是 K8S Service 暴露内部服务的一种方式，比起 ClusterIP，NodePort，LoadBalancer等方式，Ingress 具有</description>
    </item>
    
    <item>
      <title>K8s教程-kubernetes参考文档</title>
      <link>https://zazayaya.github.io/2021/08/17/k8s-doc.html</link>
      <pubDate>Tue, 17 Aug 2021 09:09:38 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/08/17/k8s-doc.html</guid>
      <description>Kubernetes 官方文档 | Kubernetes 云原生新手入门指南(非常好，包含原理，强烈推荐) Kubernetes实践指南(很不错) Kubernetes 中文指南/云原生应用架构实践手</description>
    </item>
    
    <item>
      <title>K8s教程-docker二进制安装</title>
      <link>https://zazayaya.github.io/2021/07/23/docker-install-by-binary.html</link>
      <pubDate>Fri, 23 Jul 2021 09:30:18 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/07/23/docker-install-by-binary.html</guid>
      <description>环境准备 # 开启桥接功能 modprobe br_netfilter cat &amp;gt; /etc/sysctl.d/k8s.conf &amp;lt;&amp;lt; EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sysctl -p /etc/sysctl.d/k8s.conf 防火墙选择 集成Firewalld # 默认使用 iptables 管理，如果安装了 firewalld ，则通过</description>
    </item>
    
    <item>
      <title>K8s教程-docker健康检查</title>
      <link>https://zazayaya.github.io/2021/07/20/docker-health-check.html</link>
      <pubDate>Tue, 20 Jul 2021 09:51:36 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/07/20/docker-health-check.html</guid>
      <description>Dockerfile 新增 HEALTHCHECK，healthcheck.sh 需要实现对内部程序状态的检测 HEALTHCHECK &amp;ndash;interval=5s &amp;ndash;timeout=3s CMD bash /healthcheck.sh || exit 1 测试 # 测试 mkdir nginx &amp;amp;&amp;amp; cd nginx # 编写 Dockerfile</description>
    </item>
    
    <item>
      <title>K8s教程-docker基础命令</title>
      <link>https://zazayaya.github.io/2021/06/16/docker-commands.html</link>
      <pubDate>Wed, 16 Jun 2021 11:24:48 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/06/16/docker-commands.html</guid>
      <description>docker 进入docker docker在1.3.X版本之后还提供了一个新的命令exec # 查看运行的实例 docker ps # 进入其中的一个实例 docker exec -it f9be4e65bce5 /bin/bash # 退</description>
    </item>
    
    <item>
      <title>K8s教程-containerd基础学习</title>
      <link>https://zazayaya.github.io/2021/06/08/containerd-getting-started.html</link>
      <pubDate>Tue, 08 Jun 2021 17:57:48 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/06/08/containerd-getting-started.html</guid>
      <description>测试环境：Ubuntu20.04 环境准备 # 基础包 apt-get install -y net-tools lrzsz # 安装和配置的先决条件 cat &amp;gt; /etc/modules-load.d/containerd.conf &amp;lt;&amp;lt; EOF overlay br_netfilter EOF # 加载 modprobe overlay modprobe br_netfilter # 设置必需的 sysctl 参数，这</description>
    </item>
    
    <item>
      <title>K8s教程-kubernetes基于kubeadm搭建</title>
      <link>https://zazayaya.github.io/2021/06/04/k8s-install-by-kubeadm.html</link>
      <pubDate>Fri, 04 Jun 2021 17:50:25 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/06/04/k8s-install-by-kubeadm.html</guid>
      <description>基于 kubeadm 搭建集群 kubeadm + containerd + docker 测试环境：Ubuntu20.04 master 环境准备 # Container runtimes # 容器运行时 使用 containerd (也是Docker开发的) 而不是 Docke</description>
    </item>
    
    <item>
      <title>K8s教程-kubernetes基于二进制搭建</title>
      <link>https://zazayaya.github.io/2021/06/02/k8s-install-by-binary.html</link>
      <pubDate>Wed, 02 Jun 2021 10:25:11 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/06/02/k8s-install-by-binary.html</guid>
      <description>选型 二进制安装？ 方便了解各个模块运行机制，同时支持各种版本的系统 使用cfssl做为证书工具 生成标准的命名方式，方便统一，json做为</description>
    </item>
    
    <item>
      <title>K8s教程-kubernetes异常测试</title>
      <link>https://zazayaya.github.io/2021/05/27/k8s-qa-test.html</link>
      <pubDate>Thu, 27 May 2021 10:12:38 +0800</pubDate>
      
      <guid>https://zazayaya.github.io/2021/05/27/k8s-qa-test.html</guid>
      <description>node 关闭 docker systemctl stop docker 此时kubelet也会被自动关闭 # 关闭 docker systemctl stop docker # nodes 状态变成 NotReady root@k8s-master:~/k8s-test# kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME k8s-node1 Ready &amp;lt;none&amp;gt; 41h v1.21.1 10.0.26.188 &amp;lt;none&amp;gt; Ubuntu 20.04.2 LTS 5.4.0-73-generic docker://20.10.6 k8s-node2</description>
    </item>
    
  </channel>
</rss>
